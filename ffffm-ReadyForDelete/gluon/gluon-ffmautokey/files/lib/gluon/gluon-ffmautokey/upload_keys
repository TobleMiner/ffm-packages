#!/usr/bin/lua
local site = require 'gluon.site_config'
local gutil = require 'gluon.util'
local fs = require 'luci.fs'
local nio = require 'nixio'
local lutil = require 'luci.util'
local WGETC = "/usr/bin/wget"
local SSD = "/sbin/start-stop-daemon"
minwait = 5
maxwait = 600

local urls = site.key_upload_urls

local NODEID = gutil.node_id()
local KEY = lutil.trim(lutil.exec('/etc/init.d/fastd show_key mesh_vpn'))
local VERSION = lutil.trim(fs.readfile('/lib/gluon/release'))
local wgetsuccess = 500

fs = nil
gutil = nil
site = nil
size = #urls
wait = minwait

function min(a, b)
  if (a<b) then return a end
  return b
end

while size > 0 do
  wait = min(wait + 10, maxwait)
  for url in pairs(urls) do 
    -- TODO - would it reduce the memory / cpu footprint if luasock was used?
    -- at least concurrency would be possible with fewer processes
    wgetsuccess = lutil.exec(SSD .. ' -S -c root:gluon-fastd -x ' .. WGETC .. ' -- -q -O - "' .. urls[url] .. '?nodeid=' ..  NODEID .. '&_method=post&key=' .. KEY .. '&fw_version=' .. VERSION .. '" 2>&1|/bin/grep -o 201')
    if wgetsuccess == 201 then
      urls[url] = nil
      size = size -1
    end
    nio.nanosleep(wait)
  end
end

